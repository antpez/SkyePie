import { 
  VoiceWeatherReport, 
  HapticAlert, 
  HapticPattern,
  ColorblindFriendlyPalette, 
  SimplifiedLanguageMode, 
  AccessibilitySettings, 
  WeatherDescription,
  AccessibilityFeature
} from '../types/accessibility';
import { CurrentWeather } from '../types/weather';

export class AccessibilityService {
  private static instance: AccessibilityService;
  private settings: AccessibilitySettings;
  private colorblindPalettes: ColorblindFriendlyPalette[] = [];

  constructor() {
    this.settings = {
      voiceReports: {
        enabled: false,
        autoPlay: false,
        language: 'en',
        voice: 'neutral',
        speed: 'normal'
      },
      hapticAlerts: {
        enabled: false,
        intensity: 'medium',
        weatherChanges: true,
        severeWeather: true,
        uvAlerts: true,
        airQuality: true,
        pollenAlerts: true
      },
      visualAccessibility: {
        colorblindSupport: false,
        colorblindType: 'general',
        highContrast: false,
        largeText: false,
        fontSize: 'medium',
        animations: 'full'
      },
      simplifiedMode: {
        enabled: false,
        level: 'intermediate',
        features: {
          simpleTerms: true,
          shortSentences: true,
          visualAids: true,
          audioDescriptions: true,
          largeText: false,
          highContrast: false
        },
        customizations: {
          fontSize: 'medium',
          contrast: 'normal',
          animations: 'full',
          soundEffects: true,
          hapticFeedback: true
        }
      },
      screenReader: {
        enabled: false,
        announceChanges: true,
        detailedDescriptions: true
      }
    };

    this.initializeColorblindPalettes();
  }

  static getInstance(): AccessibilityService {
    if (!AccessibilityService.instance) {
      AccessibilityService.instance = new AccessibilityService();
    }
    return AccessibilityService.instance;
  }

  private initializeColorblindPalettes() {
    this.colorblindPalettes = [
      {
        name: 'Protanopia (Red-blind)',
        type: 'protanopia',
        colors: {
          primary: '#0066CC',
          secondary: '#00AA44',
          success: '#00AA44',
          warning: '#FFAA00',
          error: '#CC0000',
          info: '#0066CC',
          background: '#FFFFFF',
          surface: '#F5F5F5',
          text: '#333333'
        }
      },
      {
        name: 'Deuteranopia (Green-blind)',
        type: 'deuteranopia',
        colors: {
          primary: '#0066CC',
          secondary: '#AA4400',
          success: '#00AA44',
          warning: '#FFAA00',
          error: '#CC0000',
          info: '#0066CC',
          background: '#FFFFFF',
          surface: '#F5F5F5',
          text: '#333333'
        }
      },
      {
        name: 'Tritanopia (Blue-blind)',
        type: 'tritanopia',
        colors: {
          primary: '#CC6600',
          secondary: '#00AA44',
          success: '#00AA44',
          warning: '#FFAA00',
          error: '#CC0000',
          info: '#CC6600',
          background: '#FFFFFF',
          surface: '#F5F5F5',
          text: '#333333'
        }
      },
      {
        name: 'Monochromacy (Color-blind)',
        type: 'monochromacy',
        colors: {
          primary: '#666666',
          secondary: '#999999',
          success: '#333333',
          warning: '#CCCCCC',
          error: '#000000',
          info: '#666666',
          background: '#FFFFFF',
          surface: '#F5F5F5',
          text: '#000000'
        }
      },
      {
        name: 'General Accessibility',
        type: 'general',
        colors: {
          primary: '#1976D2',
          secondary: '#388E3C',
          success: '#4CAF50',
          warning: '#FF9800',
          error: '#F44336',
          info: '#2196F3',
          background: '#FFFFFF',
          surface: '#F5F5F5',
          text: '#212121'
        }
      }
    ];
  }

  generateVoiceWeatherReport(weather: CurrentWeather, location: string): VoiceWeatherReport {
    const description = this.generateWeatherDescription(weather);
    
    return {
      id: `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      location,
      weather: {
        temperature: weather.main.temp,
        condition: weather.weather[0].main,
        description: description.simple,
        feelsLike: weather.main.feels_like,
        humidity: weather.main.humidity,
        windSpeed: weather.wind.speed,
        uvIndex: 0 // Would be calculated from UV data
      },
      audioUrl: '', // Would be generated by TTS service
      duration: this.calculateAudioDuration(description.audio),
      language: this.settings.voiceReports.language,
      voice: this.settings.voiceReports.voice,
      speed: this.settings.voiceReports.speed
    };
  }

  private generateWeatherDescription(weather: CurrentWeather): WeatherDescription {
    const temp = Math.round(weather.main.temp);
    const condition = weather.weather[0].main;
    const feelsLike = Math.round(weather.main.feels_like);
    const humidity = weather.main.humidity;
    const windSpeed = weather.wind.speed;

    // Simple description
    const simple = `${temp} degrees, ${condition.toLowerCase()}. Feels like ${feelsLike} degrees.`;

    // Detailed description
    const detailed = `Current temperature is ${temp} degrees Celsius with ${condition.toLowerCase()} conditions. It feels like ${feelsLike} degrees. Humidity is at ${humidity} percent and wind speed is ${windSpeed} meters per second.`;

    // Visual description for screen readers
    const visual = `Weather icon shows ${condition.toLowerCase()}. Temperature display shows ${temp} degrees. Additional information includes feels like temperature of ${feelsLike} degrees, humidity at ${humidity} percent, and wind speed of ${windSpeed} meters per second.`;

    // Audio description for voice synthesis
    const audio = `The weather is ${temp} degrees and ${condition.toLowerCase()}. It feels like ${feelsLike} degrees. The humidity is ${humidity} percent and the wind is blowing at ${windSpeed} meters per second.`;

    return { simple, detailed, visual, audio };
  }

  private calculateAudioDuration(text: string): number {
    // Rough estimation: average speaking rate is about 150 words per minute
    const words = text.split(' ').length;
    const minutes = words / 150;
    return Math.ceil(minutes * 60);
  }

  generateHapticAlert(type: HapticAlert['type'], intensity: 'light' | 'medium' | 'strong' = 'medium'): HapticAlert {
    const patterns: Record<HapticAlert['type'], HapticPattern> = {
      weather_change: {
        type: 'single_tap',
        sequence: [100],
        pause: [0]
      },
      severe_weather: {
        type: 'custom',
        sequence: [200, 100, 200, 100, 200],
        pause: [50, 50, 50, 50]
      },
      uv_alert: {
        type: 'double_tap',
        sequence: [150, 150],
        pause: [100]
      },
      air_quality: {
        type: 'triple_tap',
        sequence: [100, 100, 100],
        pause: [80, 80]
      },
      pollen_alert: {
        type: 'long_press',
        sequence: [300],
        pause: [0]
      }
    };

    const intensityMultiplier = {
      light: 0.5,
      medium: 1.0,
      strong: 1.5
    };

    const basePattern = patterns[type];
    const multiplier = intensityMultiplier[intensity];

    return {
      id: `haptic_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      pattern: {
        ...basePattern,
        sequence: basePattern.sequence.map((duration: number) => Math.round(duration * multiplier)),
        pause: basePattern.pause.map((duration: number) => Math.round(duration * multiplier))
      },
      intensity,
      duration: basePattern.sequence.reduce((sum: number, duration: number) => sum + duration, 0) * multiplier,
      repeat: type === 'severe_weather',
      repeatInterval: type === 'severe_weather' ? 5000 : undefined
    };
  }

  getColorblindPalette(type: 'protanopia' | 'deuteranopia' | 'tritanopia' | 'monochromacy' | 'general'): ColorblindFriendlyPalette {
    return this.colorblindPalettes.find(palette => palette.type === type) || this.colorblindPalettes[4];
  }

  getAllColorblindPalettes(): ColorblindFriendlyPalette[] {
    return [...this.colorblindPalettes];
  }

  updateAccessibilitySettings(settings: Partial<AccessibilitySettings>): void {
    this.settings = { ...this.settings, ...settings };
  }

  getAccessibilitySettings(): AccessibilitySettings {
    return { ...this.settings };
  }

  generateSimplifiedWeatherDescription(weather: CurrentWeather): string {
    const temp = Math.round(weather.main.temp);
    const condition = weather.weather[0].main;
    
    // Convert weather condition to simple terms
    const simpleCondition = this.convertToSimpleTerms(condition);
    
    // Generate simple description based on settings
    if (this.settings.simplifiedMode.features.simpleTerms) {
      return `It is ${temp} degrees and ${simpleCondition}.`;
    } else {
      return `The temperature is ${temp} degrees Celsius with ${condition.toLowerCase()} conditions.`;
    }
  }

  private convertToSimpleTerms(condition: string): string {
    const simpleTerms: Record<string, string> = {
      'Clear': 'sunny',
      'Clouds': 'cloudy',
      'Rain': 'rainy',
      'Snow': 'snowy',
      'Thunderstorm': 'stormy',
      'Drizzle': 'drizzly',
      'Mist': 'foggy',
      'Fog': 'foggy',
      'Haze': 'hazy',
      'Dust': 'dusty',
      'Sand': 'sandy',
      'Ash': 'ashy',
      'Squall': 'windy',
      'Tornado': 'stormy'
    };

    return simpleTerms[condition] || condition.toLowerCase();
  }

  getAccessibilityFeatures(): AccessibilityFeature[] {
    return [
      {
        id: 'voice_reports',
        name: 'Voice Weather Reports',
        description: 'Listen to weather information with text-to-speech',
        category: 'auditory',
        enabled: this.settings.voiceReports.enabled,
        settings: this.settings.voiceReports
      },
      {
        id: 'haptic_alerts',
        name: 'Haptic Weather Alerts',
        description: 'Feel weather changes through vibration patterns',
        category: 'motor',
        enabled: this.settings.hapticAlerts.enabled,
        settings: this.settings.hapticAlerts
      },
      {
        id: 'colorblind_support',
        name: 'Colorblind Support',
        description: 'Use colorblind-friendly color palettes',
        category: 'visual',
        enabled: this.settings.visualAccessibility.colorblindSupport,
        settings: this.settings.visualAccessibility
      },
      {
        id: 'high_contrast',
        name: 'High Contrast Mode',
        description: 'Increase contrast for better visibility',
        category: 'visual',
        enabled: this.settings.visualAccessibility.highContrast,
        settings: this.settings.visualAccessibility
      },
      {
        id: 'large_text',
        name: 'Large Text',
        description: 'Increase text size for better readability',
        category: 'visual',
        enabled: this.settings.visualAccessibility.largeText,
        settings: this.settings.visualAccessibility
      },
      {
        id: 'simplified_mode',
        name: 'Simplified Language Mode',
        description: 'Use simple, easy-to-understand language',
        category: 'cognitive',
        enabled: this.settings.simplifiedMode.enabled,
        settings: this.settings.simplifiedMode
      },
      {
        id: 'screen_reader',
        name: 'Screen Reader Support',
        description: 'Optimized for screen reading software',
        category: 'visual',
        enabled: this.settings.screenReader.enabled,
        settings: this.settings.screenReader
      }
    ];
  }

  generateWeatherIconDescription(condition: string, temperature: number): string {
    const conditionDescriptions: Record<string, string> = {
      'Clear': 'Sun icon representing clear, sunny weather',
      'Clouds': 'Cloud icon representing cloudy weather',
      'Rain': 'Rain cloud icon with raindrops',
      'Snow': 'Snow cloud icon with snowflakes',
      'Thunderstorm': 'Lightning bolt icon representing stormy weather',
      'Drizzle': 'Light rain cloud icon',
      'Mist': 'Foggy cloud icon with low visibility',
      'Fog': 'Thick fog cloud icon',
      'Haze': 'Hazy sun icon with reduced visibility',
      'Dust': 'Dust cloud icon',
      'Sand': 'Sand cloud icon',
      'Ash': 'Ash cloud icon',
      'Squall': 'Windy cloud icon',
      'Tornado': 'Tornado icon representing severe weather'
    };

    const baseDescription = conditionDescriptions[condition] || `${condition.toLowerCase()} weather icon`;
    return `${baseDescription}. Current temperature is ${temperature} degrees.`;
  }

  generateAccessibilityInstructions(): string[] {
    return [
      'Voice Weather Reports: Enable to hear weather information spoken aloud',
      'Haptic Alerts: Enable to feel weather changes through vibration',
      'Colorblind Support: Choose a color palette that works for your vision',
      'High Contrast: Increase contrast for better visibility',
      'Large Text: Make text larger and easier to read',
      'Simplified Mode: Use simple, easy-to-understand language',
      'Screen Reader: Optimize for screen reading software',
      'All features can be customized in the accessibility settings'
    ];
  }
}

export const accessibilityService = AccessibilityService.getInstance();
